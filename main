import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler
from telegram import ReplyKeyboardMarkup
from config import BOT_TOKEN
import wikipedia
import requests
from bs4 import BeautifulSoup
import random

wikipedia.set_lang("ru")

# Запускаем логгирование
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/start'], ['/help'], ['/rating'], ['/random_film']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


# Определяем функцию-обработчик сообщений.
# У неё два параметра, updater, принявший сообщение и контекст - дополнительная информация о сообщении.
async def echo(update, context):
    # У объекта класса Updater есть поле message,
    # являющееся объектом сообщения.
    # У message есть поле text, содержащее текст полученного сообщения,
    # а также метод reply_text(str),
    # отсылающий ответ пользователю, от которого получено сообщение.
    word = update.message.text
    try:
        await update.message.reply_text(wikipedia.summary(f"{word} фильм"))
    except:
        await update.message.reply_text(f'По запросу {word} ничего не найдено')


async def start(update, context):
    """Отправляет сообщение когда получена команда /start"""
    user = update.effective_user
    await update.message.reply_html(
        rf"Привет {user.mention_html()}! Воспользуйся функцией /help, чтобы узнать что я могу.",
        reply_markup=markup
    )


async def help_command(update, context):
    """Отправляет сообщение когда получена команда /help"""
    await update.message.reply_text(
        "Напишите название фильма/сериала, чтобы получить основную информацию о нем.\nВоспользуйтесь фунцией /rating,"
        " чтобы получить список рекомендованных фильмов и ссылок на их трейлеры.\nВоспользуйтесь фунцией /random_film,"
        " если абсолютно не знаете что посмотреть.")


async def rating(update, context):
    await update.message.reply_text(
        'Выбирите жанр:\n /r1 - Фантастика\n /r2 - Боевик\n /r3 - Комедия\n /r4 - Триллер\n /r5 - Приключения\n'
        ' /r6 - Криминал\n /r7 - Ужасы\n /r8 - Детектив\n /r9 - Драма\n /r10 - Мелодрама\n /r11 - Семейный\n '
        '/r12 - Мультфильмы\n /r13 - Биография\n /r14 - Вестерн\n /r15 - Спортивный\n /r16 - Исторический')


async def r1(update, context):
    # URL страницы для парсинга
    url = 'https://baskino.ai/films/fantasticheskie/'

    # Определение заголовков, включая User-Agent
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    # Отправка GET-запроса на веб-страницу с заголовками
    response = requests.get(url, headers=headers)

    # Парсинг HTML-контента
    data = BeautifulSoup(response.text, 'html.parser')

    # Создание списка для хранения названий фильмов
    movie_list = []

    # Извлечение информации о фильмах
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r2(update, context):
    url = 'https://baskino.ai/films/boeviki/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r3(update, context):
    url = 'https://baskino.ai/films/komedii/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r4(update, context):
    url = 'https://baskino.ai/films/trillery/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r5(update, context):
    url = 'https://baskino.ai/films/priklyuchencheskie/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r6(update, context):
    url = 'https://baskino.ai/films/kriminalnye/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r7(update, context):
    url = 'https://baskino.ai/films/uzhasy/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r8(update, context):
    url = 'https://baskino.ai/films/detektivy/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r9(update, context):
    url = 'https://baskino.ai/films/dramy/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r10(update, context):
    url = 'https://baskino.ai/films/melodramy/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r11(update, context):
    url = 'https://baskino.ai/films/semeynye/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r12(update, context):
    url = 'https://baskino.ai/films/multfilmy/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r13(update, context):
    url = 'https://baskino.ai/films/biograficheskie/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r14(update, context):
    url = 'https://baskino.ai/films/vesterny/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r15(update, context):
    url = 'https://baskino.ai/films/sportivnye/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def r16(update, context):
    url = 'https://baskino.ai/films/istoricheskie/'
    headers = {
        'User -Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    data = BeautifulSoup(response.text, 'html.parser')
    movie_list = []
    for film_data in data.find_all('div', class_='shortpost'):
        name = film_data.div.a.img['alt']
        link = film_data.div.a['href']
        movie_list.append(name + ' --- ' + link)
    await update.message.reply_text('\n'.join(movie_list))


async def random_film(update, context):
    global film
    f = open('films.txt', encoding='utf8')
    a = f.readlines()
    if a:
        film = random.choice(a)
    f.close()
    await update.message.reply_text(film)


def main():
    # Создаём объект Application.
    # Вместо слова "TOKEN" надо разместить полученный от @BotFather токен
    application = Application.builder().token(BOT_TOKEN).build()

    # Создаём обработчик сообщений типа filters.TEXT
    # из описанной выше асинхронной функции echo()
    # После регистрации обработчика в приложении
    # эта асинхронная функция будет вызываться при получении сообщения
    # с типом "текст", т. е. текстовых сообщений.
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)

    # Регистрируем обработчик в приложении.
    application.add_handler(text_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rating", rating))
    application.add_handler(CommandHandler("r1", r1))
    application.add_handler(CommandHandler("r2", r2))
    application.add_handler(CommandHandler("r3", r3))
    application.add_handler(CommandHandler("r4", r4))
    application.add_handler(CommandHandler("r5", r5))
    application.add_handler(CommandHandler("r6", r6))
    application.add_handler(CommandHandler("r7", r7))
    application.add_handler(CommandHandler("r8", r8))
    application.add_handler(CommandHandler("r9", r9))
    application.add_handler(CommandHandler("r10", r10))
    application.add_handler(CommandHandler("r11", r11))
    application.add_handler(CommandHandler("r12", r12))
    application.add_handler(CommandHandler("r13", r13))
    application.add_handler(CommandHandler("r14", r14))
    application.add_handler(CommandHandler("r15", r15))
    application.add_handler(CommandHandler("r16", r16))
    application.add_handler(CommandHandler("random_film", random_film))

    # Запускаем приложение.
    application.run_polling()


logging.disable(level=logging.CRITICAL)

# Запускаем функцию main() в случае запуска скрипта.
if __name__ == '__main__':
    main()
